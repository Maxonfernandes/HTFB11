{"ast":null,"code":"var _jsxFileName = \"/Users/maxonfernandes/Desktop/hacktofuture/maxonn/Dgdrive3.0/client/src/components/Display.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport \"./Display.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Display = _ref => {\n  _s();\n  let {\n    contract,\n    account\n  } = _ref;\n  const [data, setData] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const getdata = async () => {\n    setLoading(true);\n    let dataArray;\n    const otherAddress = document.querySelector(\".address\").value;\n    try {\n      if (otherAddress) {\n        dataArray = await contract.display(otherAddress);\n      } else {\n        dataArray = await contract.display(account);\n      }\n      console.log(dataArray);\n      if (dataArray && dataArray.length > 0) {\n        const images = await Promise.all(dataArray.map(async (item, i) => {\n          const response = await fetch(`https://gateway.pinata.cloud/ipfs/${item}`);\n          if (response.ok) {\n            const blob = await response.blob();\n            const url = window.URL.createObjectURL(blob);\n            return /*#__PURE__*/_jsxDEV(\"a\", {\n              href: url,\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: url,\n                alt: `Image ${i}`,\n                className: \"image-list\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 30,\n                columnNumber: 19\n              }, this)\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 29,\n              columnNumber: 17\n            }, this);\n          } else {\n            throw new Error(`Failed to fetch image ${item}`);\n          }\n        }));\n        setData(images);\n      } else {\n        alert(\"No image to display\");\n      }\n    } catch (error) {\n      console.error(error);\n      alert(\"Failed to fetch images\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-list\",\n      children: loading ? \"Loading...\" : data\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter Address\",\n      className: \"address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"center button\",\n      onClick: getdata,\n      children: \"Get Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Display, \"O++BGiCAraZPnoLxwfbNXXaJCW0=\");\n_c = Display;\nexport default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["useState","Display","contract","account","data","setData","loading","setLoading","getdata","dataArray","otherAddress","document","querySelector","value","display","console","log","length","images","Promise","all","map","item","i","response","fetch","ok","blob","url","window","URL","createObjectURL","Error","alert","error"],"sources":["/Users/maxonfernandes/Desktop/hacktofuture/maxonn/Dgdrive3.0/client/src/components/Display.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport \"./Display.css\";\r\n\r\nconst Display = ({ contract, account }) => {\r\n  const [data, setData] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const getdata = async () => {\r\n    setLoading(true);\r\n    let dataArray;\r\n    const otherAddress = document.querySelector(\".address\").value;\r\n    try {\r\n      if (otherAddress) {\r\n        dataArray = await contract.display(otherAddress);\r\n      } else {\r\n        dataArray = await contract.display(account);\r\n      }\r\n      console.log(dataArray);\r\n      if (dataArray && dataArray.length > 0) {\r\n        const images = await Promise.all(\r\n          dataArray.map(async (item, i) => {\r\n            const response = await fetch(\r\n              `https://gateway.pinata.cloud/ipfs/${item}`\r\n            );\r\n            if (response.ok) {\r\n              const blob = await response.blob();\r\n              const url = window.URL.createObjectURL(blob);\r\n              return (\r\n                <a href={url} key={i} target=\"_blank\" rel=\"noreferrer\">\r\n                  <img\r\n                    src={url}\r\n                    alt={`Image ${i}`}\r\n                    className=\"image-list\"\r\n                  ></img>\r\n                </a>\r\n              );\r\n            } else {\r\n              throw new Error(`Failed to fetch image ${item}`);\r\n            }\r\n          })\r\n        );\r\n        setData(images);\r\n      } else {\r\n        alert(\"No image to display\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert(\"Failed to fetch images\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"image-list\">{loading ? \"Loading...\" : data}</div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter Address\"\r\n        className=\"address\"\r\n      ></input>\r\n      <button className=\"center button\" onClick={getdata}>\r\n        Get Data\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Display;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,eAAe;AAAC;AAAA;AAEvB,MAAMC,OAAO,GAAG,QAA2B;EAAA;EAAA,IAA1B;IAAEC,QAAQ;IAAEC;EAAQ,CAAC;EACpC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMQ,OAAO,GAAG,YAAY;IAC1BD,UAAU,CAAC,IAAI,CAAC;IAChB,IAAIE,SAAS;IACb,MAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC,CAACC,KAAK;IAC7D,IAAI;MACF,IAAIH,YAAY,EAAE;QAChBD,SAAS,GAAG,MAAMP,QAAQ,CAACY,OAAO,CAACJ,YAAY,CAAC;MAClD,CAAC,MAAM;QACLD,SAAS,GAAG,MAAMP,QAAQ,CAACY,OAAO,CAACX,OAAO,CAAC;MAC7C;MACAY,OAAO,CAACC,GAAG,CAACP,SAAS,CAAC;MACtB,IAAIA,SAAS,IAAIA,SAAS,CAACQ,MAAM,GAAG,CAAC,EAAE;QACrC,MAAMC,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC9BX,SAAS,CAACY,GAAG,CAAC,OAAOC,IAAI,EAAEC,CAAC,KAAK;UAC/B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,qCAAoCH,IAAK,EAAC,CAC5C;UACD,IAAIE,QAAQ,CAACE,EAAE,EAAE;YACf,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAI,EAAE;YAClC,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;YAC5C,oBACE;cAAG,IAAI,EAAEC,GAAI;cAAS,MAAM,EAAC,QAAQ;cAAC,GAAG,EAAC,YAAY;cAAA,uBACpD;gBACE,GAAG,EAAEA,GAAI;gBACT,GAAG,EAAG,SAAQL,CAAE,EAAE;gBAClB,SAAS,EAAC;cAAY;gBAAA;gBAAA;gBAAA;cAAA;YACjB,GALUA,CAAC;cAAA;cAAA;cAAA;YAAA,QAMhB;UAER,CAAC,MAAM;YACL,MAAM,IAAIS,KAAK,CAAE,yBAAwBV,IAAK,EAAC,CAAC;UAClD;QACF,CAAC,CAAC,CACH;QACDjB,OAAO,CAACa,MAAM,CAAC;MACjB,CAAC,MAAM;QACLe,KAAK,CAAC,qBAAqB,CAAC;MAC9B;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdnB,OAAO,CAACmB,KAAK,CAACA,KAAK,CAAC;MACpBD,KAAK,CAAC,wBAAwB,CAAC;IACjC,CAAC,SAAS;MACR1B,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACE;IAAA,wBACE;MAAK,SAAS,EAAC,YAAY;MAAA,UAAED,OAAO,GAAG,YAAY,GAAGF;IAAI;MAAA;MAAA;MAAA;IAAA,QAAO,eACjE;MACE,IAAI,EAAC,MAAM;MACX,WAAW,EAAC,eAAe;MAC3B,SAAS,EAAC;IAAS;MAAA;MAAA;MAAA;IAAA,QACZ,eACT;MAAQ,SAAS,EAAC,eAAe;MAAC,OAAO,EAAEI,OAAQ;MAAA,UAAC;IAEpD;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA,gBACR;AAEP,CAAC;AAAC,GA/DIP,OAAO;AAAA,KAAPA,OAAO;AAiEb,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}